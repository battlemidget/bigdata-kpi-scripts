#!/usr/bin/env python

import yaml
import urllib3
import os
import sys
import logging

from kpi_common import get_push_gateway

from prometheus_client import CollectorRegistry, Gauge, push_to_gateway

API_URL = "https://api.jujucharms.com/v5/{}/meta/stats"


def gather_items_stats(registry, items, type='charm'):
    """Gather statistics for a list of bundles."""
    total_gauge_latest = Gauge(
        'charmstore_bd_{}_latest_downloads_total'.format(type),
        'Total number of latest revision downloads for a bundle'.format(type),
        [type],
        registry=registry,
    )
    week_gauge_latest = Gauge(
        'charmstore_bd_{}_latest_downloads_week'.format(type),
        'Total number of latest revision downloads for a {} (week)'.format(type),
        [type],
        registry=registry,
    )
    month_gauge_latest = Gauge(
        'charmstore_bd_{}_latest_downloads_month'.format(type),
        'Total number of latest revision downloads for a {} (month)'.format(type),
        [type],
        registry=registry,
    )

    total_gauge = Gauge(
        'charmstore_bd_{}_downloads_total'.format(type),
        'Total number of {} downloads for a {}'.format(type, type),
        [type],
        registry=registry,
    )
    week_gauge = Gauge(
        'charmstore_bd_{}_downloads_week'.format(type),
        'Total number of {} downloads for a {} (week)'.format(type, type),
        [type],
        registry=registry,
    )
    month_gauge = Gauge(
        'charmstore_bd_{}_downloads_month'.format(type),
        'Total number of {} downloads for a {} (month)'.format(type, type),
        [type],
        registry=registry,
    )

    http = urllib3.PoolManager()

    for item in items:
        url = API_URL.format(item)
        stats = http.request('GET', url)
        if stats.status == 200:
            stats = yaml.load(stats.data)
            total_gauge.labels(item).set(stats['ArchiveDownloadAllRevisions']['Total'])
            week_gauge.labels(item).set(stats['ArchiveDownloadAllRevisions']['Week'])
            month_gauge.labels(item).set(stats['ArchiveDownloadAllRevisions']['Month'])
            total_gauge_latest.labels(item).set(stats['ArchiveDownload']['Total'])
            week_gauge_latest.labels(item).set(stats['ArchiveDownload']['Week'])
            month_gauge_latest.labels(item).set(stats['ArchiveDownload']['Month'])


charms = [
    'apache-spark',
    'spark',
    'apache-hadoop-namenode',
    'hadoop-namenode',
    'apache-hadoop-resourcemanager',
    'hadoop-resourcemanager',
    'apache-hadoop-slave',
    'hadoop-slave',
    'apache-flume-syslog',
    'hadoop-client',
    'apache-zeppelin',
    'apache-flume-hdfs',
    'apache-hive',
    'hive',
    'apache-hadoop-plugin',
    'hadoop-plugin',
    'apache-zookeeper',
    'zookeeper',
    'apache-pig',
    'pig',
    'apache-flume-kafka',
    'kafka',
    'apache-kafka',
]

bundles = [
    'hadoop-kafka',
    'apache-analytics-pig',
    'apache-analytics-sql',
    'apache-hadoop-spark-zeppelin',
    'realtime-syslog-analytics',
    'hadoop-processing',
    'apache-hadoop-spark-zeppelin',
    'apache-analytics-sql',
    'apache-analytics-pig',
    'apache-processing-mapreduce',
    'apache-processing-spark',
]

if __name__ == "__main__":
    pkg = 'bigdata-kpi-scripts'
    name = os.path.basename(sys.argv[0])
    gateway = get_push_gateway(pkg, name)
    logging.basicConfig(level=logging.DEBUG)

    registry = CollectorRegistry()
    try:
        gather_items_stats(registry, charms, 'charm')
        gather_items_stats(registry, bundles, 'bundle')
    finally:
        push_to_gateway(gateway, job=name, registry=registry)
